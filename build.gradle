plugins {
    id 'org.ajoberstar.grgit' version '2.3.0'
}

allprojects {
    apply plugin: 'java'
    
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    
    repositories {
        mavenLocal()
        maven {
            url 'https://github.com/MegaMek/mavenrepo/raw/master'
        }
        jcenter()
    }
}

subprojects {
    group = 'org.megamek'
    version = '0.46.1'
}

ext {
    hqGitRoot = 'https://github.com/MegaMek/mekhq.git'
    mmGitRoot = 'https://github.com/MegaMek/megamek.git'
    mmlGitRoot = 'https://github.com/MegaMek/megameklab.git'
    // Work on MML or MHQ sometimes requires changes in MM as well. The maven publishing tasks use
    // these properties to append the branch name to the artifact id if the repo is not in the master
    // branch, making it available separately to the child project. 
    hqBranch = grgit.branch.current.name
    hqBranchTag = hqBranch.equals('master')? '' : '-' + hqBranch
    
    // Allows setting a dependency on a different MM branch.
    mmBranch = '0.46.1-Incline_Cliff'
    mmBranchTag = mmBranch.equals('master')? '' : '-' + mmBranch
    mmlBranch = '0.46.1-Incline_Cliff'
    mmlBranchTag = mmlBranch.equals('master')? '' : '-' + mmlBranch
    
    mmDir = "${rootDir}/../megamek"
    mmlDir = "${rootDir}/../megameklab"
}

// A properties_local.gradle file can be used to override any of the above options. For instance,
// rootProject.ext.gitRoot = 'file:///path/to/local/repo' will cause the release target to clone a
// local copy of the repository rather than downloading it.

def localProperties = file('properties_local.gradle')
if (localProperties.exists()) {
    apply from: localProperties
}

